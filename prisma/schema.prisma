// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User permission types
enum UserPermission {
  ADMIN
  READ_WRITE
  READ
  NONE
}

// User model
model User {
  id         String         @id @default(uuid()) @db.Uuid
  email      String         @unique
  image      String?
  name       String?
  permission UserPermission @default(NONE)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  sessions   Session[]
}

// Session model
model Session {
  id      String   @id @default(uuid()) @db.Uuid
  token   String   @unique
  userId  String   @db.Uuid
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Email verification tokens model
// No need for one-to-one relationship w/ User:id => EmailVerificationTokens:userId
model EmailVerificationTokens {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, token])
}

// API key providers
enum ProviderType {
  PAPERSPACE
}

// API key model
model Provider {
  id        String       @id @default(uuid()) @db.Uuid
  type      ProviderType @unique
  key       String
  authToken String?      // for private APIs
  namespace String?      // for private APIs
  email     String?      // for authToken refresh
  password  String?      // for authToken refresh
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  servers   Server[]
}

// Server model
model Server {
  // Generated by provider, enforced unique via ID
  id          String   @id
  providerId  String   @db.Uuid
  name        String
  description String
  model       String?   // ML model deployed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  provider Provider @relation(fields: [providerId], references: [id])
}

// Redaction sensitivities
enum RedactOption {
  PASSTHROUGH
  WARN
  REDACT
  BLOCK
}

// K/V configuration store
// Note: generally not a fan of K/V config storage in DB but 
//     trying to minimize storage locations / services we need
model Configuration {
  id        String     @id @default(uuid()) @db.Uuid
  key       String     @unique
  // Defaulting to RedactOption for now given its the only config we are storing
  value     RedactOption @default(PASSTHROUGH)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
